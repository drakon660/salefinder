// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: messages.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Messages {
  public static partial class PDFBoxService
  {
    static readonly string __ServiceName = "PDFBoxService";

    static readonly grpc::Marshaller<global::Messages.PDFInfoMessage> __Marshaller_PDFInfoMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Messages.PDFInfoMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Messages.PDFExportRequest> __Marshaller_PDFExportRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Messages.PDFExportRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Messages.PDFExportResponse> __Marshaller_PDFExportResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Messages.PDFExportResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Messages.PingRequest> __Marshaller_PingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Messages.PingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Messages.PongResponse> __Marshaller_PongResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Messages.PongResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Messages.Words> __Marshaller_Words = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Messages.Words.Parser.ParseFrom);

    static readonly grpc::Method<global::Messages.PDFInfoMessage, global::Messages.PDFInfoMessage> __Method_PdfPagesCount = new grpc::Method<global::Messages.PDFInfoMessage, global::Messages.PDFInfoMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PdfPagesCount",
        __Marshaller_PDFInfoMessage,
        __Marshaller_PDFInfoMessage);

    static readonly grpc::Method<global::Messages.PDFExportRequest, global::Messages.PDFExportResponse> __Method_ImportExport = new grpc::Method<global::Messages.PDFExportRequest, global::Messages.PDFExportResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImportExport",
        __Marshaller_PDFExportRequest,
        __Marshaller_PDFExportResponse);

    static readonly grpc::Method<global::Messages.PingRequest, global::Messages.PongResponse> __Method_Ping = new grpc::Method<global::Messages.PingRequest, global::Messages.PongResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_PingRequest,
        __Marshaller_PongResponse);

    static readonly grpc::Method<global::Messages.Words, global::Messages.Words> __Method_Chat = new grpc::Method<global::Messages.Words, global::Messages.Words>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Chat",
        __Marshaller_Words,
        __Marshaller_Words);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Messages.MessagesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PDFBoxService</summary>
    public abstract partial class PDFBoxServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Messages.PDFInfoMessage> PdfPagesCount(global::Messages.PDFInfoMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Messages.PDFExportResponse> ImportExport(global::Messages.PDFExportRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Messages.PongResponse> Ping(global::Messages.PingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Chat(grpc::IAsyncStreamReader<global::Messages.Words> requestStream, grpc::IServerStreamWriter<global::Messages.Words> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PDFBoxService</summary>
    public partial class PDFBoxServiceClient : grpc::ClientBase<PDFBoxServiceClient>
    {
      /// <summary>Creates a new client for PDFBoxService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PDFBoxServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PDFBoxService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PDFBoxServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PDFBoxServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PDFBoxServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Messages.PDFInfoMessage PdfPagesCount(global::Messages.PDFInfoMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PdfPagesCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Messages.PDFInfoMessage PdfPagesCount(global::Messages.PDFInfoMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PdfPagesCount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Messages.PDFInfoMessage> PdfPagesCountAsync(global::Messages.PDFInfoMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PdfPagesCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Messages.PDFInfoMessage> PdfPagesCountAsync(global::Messages.PDFInfoMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PdfPagesCount, null, options, request);
      }
      public virtual global::Messages.PDFExportResponse ImportExport(global::Messages.PDFExportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportExport(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Messages.PDFExportResponse ImportExport(global::Messages.PDFExportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportExport, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Messages.PDFExportResponse> ImportExportAsync(global::Messages.PDFExportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportExportAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Messages.PDFExportResponse> ImportExportAsync(global::Messages.PDFExportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportExport, null, options, request);
      }
      public virtual global::Messages.PongResponse Ping(global::Messages.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Messages.PongResponse Ping(global::Messages.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Messages.PongResponse> PingAsync(global::Messages.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Messages.PongResponse> PingAsync(global::Messages.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Messages.Words, global::Messages.Words> Chat(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Chat(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Messages.Words, global::Messages.Words> Chat(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Chat, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PDFBoxServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PDFBoxServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PDFBoxServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PdfPagesCount, serviceImpl.PdfPagesCount)
          .AddMethod(__Method_ImportExport, serviceImpl.ImportExport)
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_Chat, serviceImpl.Chat).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PDFBoxServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_PdfPagesCount, serviceImpl.PdfPagesCount);
      serviceBinder.AddMethod(__Method_ImportExport, serviceImpl.ImportExport);
      serviceBinder.AddMethod(__Method_Ping, serviceImpl.Ping);
      serviceBinder.AddMethod(__Method_Chat, serviceImpl.Chat);
    }

  }
}
#endregion
